#include <cstdint>
#include <stdio.h>

#include "globals.h"

int main(int, char **){

	/**
	 * ASCII table
	 * A = 65 = 01000001 = 00
	 * C = 67 = 01000011 = 01
	 * G = 71 = 01000111 = 11
	 * T = 84 = 01010100 = 10
	 */


	
	// Golden reference
	const int NR = 1;
	const int NP = 32;
	uint32_t golden[NP*NR] = {
		0x9f,0x96,0x6c,0x83,0x92,0x7c,0x72,0x9e,0x9b,0x7c,0x82,0x94,0x7f,0x9d,0x9b,0x9f,0x92,0x9a,0x7f,0x93,0x8e,0x97,0x93,0x9e,0x7c,0x9b,0x91,0x8c,0x81,0x9e,0x8f,0x8d,
	};
	
	// Pattern == query
	char reference_s[][MAX_SEQ_LENGTH]={ 
		"TGACATATTTTGCCACTCTACCTAGCCAAGGGGCAGAGTGAGGGAGGTGAATAATTTTATTTTAACAGTGCCCCTGTCAGGAGGGGAAGCAAGGGCTCACCTGATTTATTCATGATGTTTATTCACTCCCAGAGCCCAGATCTGGGAGATAGACTTGGCA",
	};
	// Reference == target
	char pattern_s[][MAX_SEQ_LENGTH]={
		"TGACATATTTTGCCACTCTACCTAGCCAAGGGGCAGAGTGAGGGAGGTGAATAATTTTATTTTAACAGTGCCCCTGTCAGGAGGGGAAGCAAGGGCTCACCTGATTTATTCATGATGTTTATTCACTCCCAGAGCCCAGATCTGGGAGATAGACTTGGCA",
		"ataataaaTAAGACAAGTCATGTCCCCTCCATTCAGTGCATTCCACAGGTAAAAGCTCCTGCACCCTGCACCCCTTACCTCTCCCTCTTCATCTCCTCCCCATCACTTCTCTcctcactccactccagtcaCACCAGCTCCCTTGCCTGTGTAGCCTCAA",
		"TTTCACATATTGGCCAGGTTGGTCTTGAACCCCTGACCTCGTGATCCGCCTGCCTCAGCCTCCCAAAATGCTGGGAGATCTGTATTTTTTTTTTTTTTTGAGACGGAATTTCGCTCTTATTGCCCAGGCTGGAGTGCAAATGGCACGATCTCGGCTCACT",
		"aaaactctgtctcaaaaaaaaaaagaattagcctggcatggtggcacacatctgtggtcccacctacttgggaggctgaggtgggaggatcacttgagccagggaggcagaggttgcagtgagccaagattccaccactgcactccagcccgcgtgacag",
		"cacctgctggCCTCCTGAATGCTTCTTTCCCAGTGAAATCTTCTCTGCCCACATCCACACCTGCAGTTGCAACCTTTCCCTGCAATGGAGGTCTTCCCTCCCAGACCCCACCGTTCATTCTCTGTTTTGTTCAATGACTGCTTCCCCACATTAGAATGGA",
		"tgctgtattcccagtgcctaaAGCCATTAGAGGAATATCTGTACTTCCAGCAAGTGGCTTTTGGAAAATGTCATGCTGGAGCATGTGCCTATGGAAAATAAGGtcaactgggcacagtggctcatgcctgtaatcctagcactttgggaggccaagacag",
		"gttgcagtgagctgagatcaagccactgcactccagcctgagtgacagagcaagactccctctcaaaacaaaacaaaaggctgagcgcggtggctcacaactgtaatcccagcactttgggaggctgaggtgggcggatcatgaggtcaggagttcaaga",
		"CTAGGGGAAGGGCAGAGAGCTTTTCTTGTATCTGCTTCTTCTTAACTGGCTTCAGCTCAACATGATCCTTATGCCAAAGCTGCATGTTTTGGCGTGACATATTTTGCCACTCTACCTAGCCAAGGGGCAGAGTGAGGGAGGTGAATAATTTTATTTTAAC",
		"AATTTTTGTATTTTTAGTAGAGATGGGGTTTCACCATATTGTCCAGGATTGTCTCCATCTCTTGACCTCGTGATCCGCCCGCCTTGCCTCCCAAAGTGTTGGGATTACAGGCGTGAGCCACTGCGCGCAGCCTAATTCTTTTTTTGTAGAGACAGAGTTT",
		"ATCCACACCTGCAGTTGCAACCTTTCCCTGCAATGGAGGTCTTCCCTCCCAGACCCCACCGTTCATTCTCTGTTTTGTTCAATGACTGCTTCCCCACATTAGAATGGAAGCCCTGGGAGGGCAGGATCTTTATTGGAATTGGtcactgctgtattcccag",
		"aacatggagaaaccccgtctctactaaaaatacaaaaaaattaactgggcatggtggcccatgcttgtaatcccagctactcgggaggctgaggcaggagaatcgcttgaacccagaaggcagaggttgtggtgagctgagatcgagccattgcacccca",
		"CAGTTGTGAGCCACCGCGCTCAGCCTTTTGTTTTGTTTTGAGAGGGAGTCTTGCTCTGTCACTCAGGCTGGAGTGCAGTGGCTTGATCTCAGCTCACTGCAACCTCTGCCTCCCCGGTTCAAGCGATTCTCCTGCCTCAGCTCCCAAGTAGCTGGGATTA",
		"GGTTTTGTAAGTGTCTAGCATTTCTCCTGCTGGCATTCCTTCTCTCTCCTGCCGCCTTGTGTTTTTTTGAGACAGAGTCTCGGTCTGTCGCCCAGGCTGGAGTGCAATGGCATGATCTCGGCTCACTGCAACCTCCGCCTCCCGGGTTTAGGCAATTATC",
		"ACAGAGAATGAACGGTGGGGTCTGGGAGGGAAGACCTCCATTGCAGGGAAAGGTTGCAACTGCAGGTGTGGATGTGGGCAGAGAAGATTTCACTGGGAAAGAAGCATTCAGGAGGCCAGCAGGTGCAAAGGCTCTGGGGCAGGAGTGTGCCTATTGTGTT",
		"ACAGGCGTGAGCCACTGGGCCCGGCCAGACCTGGCACATTTTTTTGCAAGTTAGGGAAGGGGTGGTGATATGGTTTGGCTGTGTCCCCACTCAAATCTCATCTTGAATTGTAGTTCCCATAATCCCCACATGTTGTGGGAGGGACCAGGTGGAGGTAATT",
		"GAGGGAGGTGAATAATTTTATTTTAACAGTGCCCCTGTCAGGAGGGGAAGCAAGGGCTCACCTGATTTATTCATGATGTTTATTCACTCCCAGAGCCCAGATCTGGGAGATAGACTTGGCACATTTTTTTTTTTTTTGAGACAGAGTTTCGCTTTTGTTG",
		"ACCTTATTTTCCATAGGCACATGCTCCAGCATGACATTTTCCAAAAGCCACTTGCTGGAAGTACAGATATTCCTCTAATGGCTTTAGGCACTGGGAATACAGCAGTGACCAATTCCAATAAAGATCCTGCCCTCCCAGGGCTTCCATTCTAATGTGGGGA",
		"tcacaactgtaatcccagcactttgggaggctgaggtgggcggatcatgaggtcaggagttcaagacgagcctggccaagagaccagcctggggtcaacatggtgaaaccacgtctctaccaaaaatacaaaaattagccaggcgtggtggcgggcgcct",
		"GCCACCTCCGCCTCCCGGGTTCAAGCAATTCTGTTGCCTCAGCCTCCTGAGTAGTTAGGACTACAGGCGAGTGCCACCACTCCCAGCTAATTTTTGTATTTTTAGTAGAGATGGGGTTTCACCATATTGTCCAGGATTGTCTCCATCTCTTGACCTCGTG",
		"tccacatgtctggaaggccgcaggaaacttacaatcatggcggaagaggAAGCAGACACGTgcttcttcacagggcggcaggagaggctgggcgcagtggctcacacttgtaatcccagcactttgggaggctgaggagggtggatcacttgaggtaggg",
		"ctactcgggaggctgaggcaggagaatcgcttgaacccagaaggcagaggttgtggtgagctgagatcgagccattgcaccccagccaggacaacaaaagcgaaactctgtctcaaaaaaaaaaaaaatgtgccaagTCTATCTCCCAGATCTGGGCTCT",
		"TTTTCAGTAGGGACTGGGTTTCACATATTGGCCAGGTTGGTCTTGAACCCCTGACCTCGTGATCCGCCTGCCTCAGCCTCCCAAAATGCTGGGAGATCTGTATTTTTTTTTTTTTTTGAGACGGAATTTCGCTCTTATTGCCCAGGCTGGAGTGCAAATG",
		"ctctacaaaaaaagaattaggctgcgcgcagtggctcacgcctgtaatcccaacactttgggaggcaaggcgggcggatcacgaggtcaagagatggagacaatcctggacaatatggtgaaaccccatctctactaaaaatacaaaaattagctgggag",
		"taaaaatacaaaaattagctgggagtggtggcactcgcctgtagtcctaactactcaggaggctgaggcaacagaattgcttgaacccgggaggcggaggtggcagtgagccaagatcatgccactacactccagcctggcgacagagcaaaactctgtc",
		"TCATGAATAAATCAGGTGAGCCCTTGCTTCCCCTCCTGACAGGGGcactgttaaaataaaattattcacctCCCTCACTCTGCCCCTTGGCTAGGTAGAGTGGCAAAATATGTCACGCCAAAACATGCAGCTTTGGCATAAGGATCATGTTGAGCTGAAG",
		"CTCCTCAGCCTCCCAAAGTGCTGGGATTACAAGTGTGAGCCACTGCGCCCAGCCTCTCCTGCCGCCCTGTGAAGAAGCACGTGTCTGCTTCCTCTTCCGCCATGATTGTAAGTTTCCTGCGGCCTTCCAGACATGTGGAACTGAGTCAGTTGAACCTCTT",
		"GCCACTGGGCCCGGCCAGACCTGGCACATTTTTTTGCAAGTTAGGGAAGGGGTGGTGATATGGTTTGGCTGTGTCCCCACTCAAATCTCATCTTGAATTGTAGTTCCCATAATCCCCACATGTTGTGGGAGGGACCAGGTGGAGGTAATTGAATCATGGG",
		"TTGAGACAGAGTTTTGCTCTGTCGCCAGGCTGGAGTGTAGTGGCATGATCTTGGCTCACTGCCACCTCCGCCTCCCGGGTTCAAGCAATTCTGTTGCCTCAGCCTCCTGAGTAGTTAGGACTACAGGCGAGTGCCACCACTCCCAGCTAATTTTTGTATT",
		"TTTTGATGGGAGGGAGCTGGGACCTGGAGGCGGGAGGAAGGGCAGGTGAGGGGCAAAATGAAAAGGAAAGCACTTTTTCAGAGTTAGGGCAAATGTCTCAGAATTAATTGAACCTTGTTTTCCTTTTTTTTTTTTTTGAGATGAAATCTCACTCTGTCAC",
		"TCAGCCTCCCAAAGTGCTGGGATTACAAGTGTGAGCCACTGCGCCCAGCCTCTCCTGCCGCCCTGTGAAGAAGCACGTGTCTGCTTCCTCTTCCGCCATGATTGTAAGTTTCCTGCGGCCTTCCAGACATGTGGAACTGAGTCAGTTGAACCTCTTTTCT",
		"CTGGGACCTGGAGGCGGGAGGAAGGGCAGGTGAGGGGCAAAATGAAAAGGAAAGCACTTTTTCAGAGTTAGGGCAAATGTCTCAGAATTAATTGAACCTTGTTTTCCTTTTTTTTTTTTTTGAGATGAAATCTCACTCTGTCACGCGGGCTGGAGTGCAG",
		"tccagcctggcgacagagcaaaactctgtctcaaaaaaaaaaagaattagcctggcatggtggcacacatctgtggtcccacctacttgggaggctgaggtgggaggatcacttgagccagggaggcagaggttgcagtgagccaagattccaccactgc"
	};
	

	#ifdef DEBUG
	printf("Query: %016X %016X\n", &pattern_s[0][0], &pattern_s[1][0]);
	printf("Target: %016X %016X\n", &reference_s[0][0], &reference_s[1][0]);
	#endif

	int32_t output[NR*NP];
	uint32_t ref_l[NR];
	uint32_t pat_l[NP];
	for(int i=0; i<NR; i++){
		ref_l[i] = strlen(reference_s[i]);
	}
	for(int i=0; i<NP; i++){
		pat_l[i] = strlen(pattern_s[i]);
	}
	printf("Launching accelerator...\n");
	SeqMatcherHW((sequence_chain*)((void*)reference_s), NR, ref_l, (sequence_chain*)((void*)pattern_s), NP, pat_l, output);

	int errors = 0;
	for(int i=0; i<NR*NP; i++){
		if (output[i] != golden[i]){
			errors++;
			printf("\033[1;31m%u != %u\033[0m\n", output[i], golden[i]);
		}else{
			printf("\033[1;32m%u == %u\033[0m\n", output[i], golden[i]);
		}
	}

	if (errors == 0){
		printf("Test passed!\n");
	} else {
		printf("Test failed with %d errors\n", errors);
	}
	printf("\n");

	return 0;

}
